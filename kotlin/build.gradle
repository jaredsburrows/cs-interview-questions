import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
import static org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED
import static org.gradle.api.tasks.testing.logging.TestLogEvent.SKIPPED
import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0

plugins {
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.license)
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(JavaVersion.VERSION_11.toString()))
    }
}

tasks.withType(KotlinCompilationTask.class).configureEach {
    compilerOptions {
        allWarningsAsErrors = true
        jvmTarget = JVM_11
    }
}

tasks.withType(KotlinJvmCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JVM_11)
        languageVersion.set(KOTLIN_2_0)
        apiVersion.set(KOTLIN_2_0)
        freeCompilerArgs.add("-progressive")
        freeCompilerArgs.add("-Xjsr305=strict")
        freeCompilerArgs.add("-Xemit-jvm-type-annotations")
        freeCompilerArgs.add("-Xassertions=jvm")
        freeCompilerArgs.add("-Xjvm-default=all")
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat = FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        events = [FAILED, SKIPPED]
    }

    def maxWorkerCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
}

dependencies {
    implementation platform(libs.kotlin.bom)
    implementation libs.kotlin.stdlib

    testRuntimeOnly libs.spek.junit
    testRuntimeOnly libs.junit.engine

    testImplementation libs.junit.api
    testImplementation libs.spek.jvm
    testImplementation libs.kotlin.test
    testImplementation libs.kotlin.junit5
}
