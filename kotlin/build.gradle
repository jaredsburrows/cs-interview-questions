import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

plugins {
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.license)
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(KotlinCompilationTask.class).configureEach {
    compilerOptions {
        allWarningsAsErrors = true
        jvmTarget = JvmTarget.JVM_17
    }
}

tasks.withType(KotlinJvmCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_17)
        freeCompilerArgs.addAll([
            "-Xjsr305=strict",
            "-Xemit-jvm-type-annotations",
            "-Xassertions=jvm",
            "-Xjvm-default=all"
        ])
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
        events = [TestLogEvent.FAILED, TestLogEvent.SKIPPED]
        showCauses = true
        showExceptions = true
        showStackTraces = true
    }

    def maxWorkerCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
}

dependencies {
    implementation platform(libs.kotlin.bom)
    implementation libs.kotlin.stdlib

    testRuntimeOnly libs.spek.junit
    testImplementation platform(libs.junit.bom)
    testRuntimeOnly libs.junit.platform.launcher
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly libs.junit.vintage.engine

    testImplementation libs.junit.api
    testImplementation libs.spek.jvm
    testImplementation('io.github.classgraph:classgraph:4.8.181') {
        because 'https://cwe.mitre.org/data/definitions/611.html'
    }
    testImplementation libs.kotlin.test
    testImplementation libs.kotlin.junit5
}
