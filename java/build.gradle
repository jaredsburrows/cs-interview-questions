plugins {
    id 'java-library'
    id 'groovy'
    alias(libs.plugins.license)
}

java {
    sourceCompatibility = JavaVersion.VERSION_11.toString()
    targetCompatibility = JavaVersion.VERSION_11.toString()

    toolchain {
        languageVersion.set(JavaLanguageVersion.of(JavaVersion.VERSION_11.toString()))
    }
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configure(options) {
        compilerArgs << '-Xlint:all'
        compilerArgs << '-Xlint:-options'
        encoding = 'utf-8'
        fork = true
    }
}

tasks.withType(GroovyCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_11.toString()
    targetCompatibility = JavaVersion.VERSION_11.toString()

    configure(options) {
        compilerArgs << '-Xlint:all'
        compilerArgs << '-Xlint:-options'
        encoding = 'utf-8'
        fork = true
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        events = ['failed', 'skipped']
    }

    def maxWorkerCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
}

dependencies {
    compileOnly libs.findbugs

    testRuntimeOnly libs.junit.engine

    testImplementation localGroovy()
    testImplementation libs.spockcore, { exclude module: 'groovy-all' } // Use localGroovy()
    testImplementation libs.equalsverifier
}
